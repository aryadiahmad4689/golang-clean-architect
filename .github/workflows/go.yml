name: Go

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16
        
    - name: run docker
      run: docker-compose up -d

    - name: Test
      run: |
         make integration-test

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: mysql:5.7.22
        # Provide the password for postgres
        env:
           MYSQL_DATABASE: db_golang_architecture
           MYSQL_USER: root
           MYSQL_PASSWORD:
           MYSQL_ROOT_PASSWORD: root
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v2

      # Performs a clean installation of all dependencies in the `package.json` file
      # For more information, see https://docs.npmjs.com/cli/ci.html
      # - name: Install dependencies
      #   run: npm ci

      - name: Connect to mysql
        # Runs a script that creates a PostgreSQL table, populates
        # the table with data, and then retrieves the data.
        run: go run main.go
        # Environment variables used by the `client.js` script to create a new PostgreSQL table.
        env:
          # The hostname used to communicate with the PostgreSQL service container
          MYSQL_HOST: localhost
          # The default PostgreSQL port
          MYSQL_PORT: 3306
    # - name: Test
    #   run: go test -v ./...
